#+title: Game Programming with Python
#+author: Marcus Birkenkrahe
#+subtitle: Variables
#+startup: overview hideblocks indent entitiespretty:
#+property: header-args:python :python python3 :session *Python* :results output :exports both :noweb yes :tangle yes:
* Manipulating values

* Manipulating integer values

We'll start by learning how to manipulate numbers ('arithmetic').

- In the code block, execute the operation `2 + 2` (`CTRL + ENTER`).
  #+begin_src python :python python3 :session *Python* :results output
    2 + 2
  #+end_src

- In the next code block, write `2 + 2` on one line, and `2 - 2` on
  the next line, then execute the block:
  #+begin_src python :python python3 :session *Python* :results output
    2 + 2
    2 - 2
  #+end_src

  #+RESULTS:
  : 4
  : 0

- [In Colab] Where did the first result go? Answer: you need to use
  =print= for every expression that you want to print out, otherwise
  only the last one evaluated will be shown.

* Using operators, floats, integers

- You can add, subtract, multiply and divide in Python.
  #+begin_src python :python python3 :session *Python* :results output
    print(1e3 * 1e-3)
    print(1/1)
  #+end_src

  #+RESULTS:
  : 1.0
  : 1.0

- The first line above uses scientific notation for large numbers:
  `1e3` is `10 * 10 * 10 = 1000`, and `1e-3` is `1 / (10 * 10 * 10) =
  1/1000` or `0.001`.

- Both operations result in a decimal (or floating-point) number
  (`1.0`), or /float/, rather than a whole (or integer) number (`1`).

- A number like `1` or `2.0` is a /value/. A math problem like `2 + 2`
  is an /expression/. Expressions are made up of values connected by
  operators (`+`).
  #+attr_html: :width 200px:
  [[./img/expression.png]]

- The computer is obsessed with evaluating expressions. In the next
  code block, evaluate some expressions and `print` the results:
  1) `2 + 2 + 2 + 2 + 2`
  2) `8*6`
  3) `10 - 5 + 6`
  4) `2 +          2`
  #+begin_src python :python python3 :session *Python* :results output
    print(2 + 2 + 2 + 2 + 2)
    print(8*6)
    print(10 - 5 + 6)
    print(2 +          2)
  #+end_src

  #+RESULTS:
  : 10
  : 48
  : 11
  : 4

- When an expression is evaluated, Python has to observe an order of
  operations ("P+E+MD+AS"). The expression is always evaluated to a
  single value:
  #+attr_html: :width 200px:
  [[./img/expression1.png]]

- Run the first line of the code in a code block and `print` the
  result:
  #+begin_src python :python python3 :session *Python* :results output
    print(8 * 3 / 2 + 2 + 7 - 9)
  #+end_src

  #+RESULTS:
  : 12.0

- Test question: Will the following expressions give the same or
  different results?
  #+begin_src python :python python3 :session *Python* :results output
    print(8 * 3 / 2 + 2 + 7 - 9)
    print(2 + 7 - 9 + 8 * 3 / 2)
    print(2 + 7 - 9 + 8 * (3 / 2))
    print(2 + 8 * (3 / 2) + 7 - 9)
  #+end_src

* Making syntax errors

- Entering ` 5 + ` generates a `SyntaxError` because the `+` operator
  is binary and requires two arguments on either side:
  #+begin_src python :python python3 :session *Python* :results output
    5 +
  #+end_src

- Syntax errors result from not observing the rules of the language -
  it's as if Yoda was saying "Home I go". This violates the SPO rule
  of English syntax - Subject + Predicate + Object.

- The difference between humans and machines: we can often, the
  computer can never recover from syntax errors.

* Storing values in variables

- A variable is like a box that can hold a value.

- In the next code block, store the integer number `15` in a variable
  called `spam`[fn:1].
  #+begin_src python :python python3 :session *Python* :results silent
    spam = 15
  #+end_src

- You've just written a /statement/ or more specifically an /assignment
  statement/ using the assignment operator `=`. There's no output until
  you ask for the value stored in `spam`.
  #+begin_src python :python python3 :session *Python* :results output
    print(spam)
  #+end_src

  #+RESULTS:
  : 15

- Python is case-sensitive, i.e. `SPAM` is different from `spam` or
  from `Spam`. You can test that by printing all of these:
  #+begin_src python :python python3 :session *Python* :results output
    print(spam)
    print(SPAM)
    print(Spam)
  #+end_src

  #+RESULTS:
  : 15

- The last two attempts result in a `NameError` because these
  variables were `not defined`, i.e. they were never assigned values.

* Computing with variables

- Once a variable is defined, you can use it to compute. In the next
  code block, `print` the expressions `spam + 5` and `spam * spam`:
  #+begin_src python :python python3 :session *Python* :results output
    print(spam + 5)
    print(spam * spam)
  #+end_src

  #+RESULTS:
  : 20
  : 225

- In fact, you don't need two lines for this: put both expressions in
  the same `print` command:
  #+begin_src python :python python3 :session *Python* :results output
    print(spam + 5, spam * spam)
  #+end_src

  #+RESULTS:
  : 20 225

- Now change the value of `spam` to `3` and print the expressions
  again:
  #+begin_src python :python python3 :session *Python* :results output
    spam = 3
    print(spam + 5, spam * spam)
  #+end_src

  #+RESULTS:
  : 8 9

- Do you think it's possible to do all of that in the `print` command,
  like this:
  #+begin_src python :python python3 :session *Python* :results output
    print(spam = 3, spam + 5, spam * spam)
  #+end_src

- You encounter a third kind of error, a `TypeError`: inside `print`,
  `spam` is not recognized as part of `spam = 3`.

- However, if you change the `=` in the last command to a `==`, the
  code works:
  #+begin_src python :python python3 :session *Python* :results output
    print(spam == 3, spam + 5, spam * spam)
  #+end_src

  #+RESULTS:
  : True 8 9

- This is because now you're printing a /value/ as required by Python,
  the value is `True` because `spam` is actually equal to `3`. The
  `==` is a relational operator. It tests the equality of its left and
  its right hand operand.

- In the next code block, first alter the value of `spam` by adding
  `2` to itself like this: `spam = spam + 2`. In the following line,
  repeat the previous `print` command:
  #+begin_src python :python python3 :session *Python* :results output
    spam = spam + 2
    print(spam == 3, spam + 5, spam * spam)
  #+end_src

  #+RESULTS:
  : False 10 25

- Now, `spam == 3` is `False`, because the new value is 3 + 2 = 5.

- In the next code block, define two more variables, `bacon` with the
  value `10`, and `eggs` with the value `15`.
  #+begin_src python :python python3 :session *Python* :results silent
    bacon = 10
    eggs = 15
  #+end_src

- Enter `spam = bacon + eggs` in the next code block, then check the
  value of `spam`:
  #+begin_src python :python python3 :session *Python* :results output
    spam = bacon + eggs
    print(spam)
  #+end_src

  #+RESULTS:
  : 25

* Summary

- Expressions are values like `2` or `5.0` combined with operators
  like `+` or `/`.

- Expressions are evaluated and reduced to a single value.

- Values can be stored in variables to be remembered and used later.

- Python errors include `SyntaxError`, `TypeError` and `NameError`.

* Code summary
* Programming assignment: Colab notebook without AI

- Create a new notebook

- Create text cells

- Create and run code cells

- Add the =matplotlib= graphics library

- Add the =random= random number library

- Generate a "noise" plot of random numbers

- Customize the plot (title, labels)

- The notebook is automatically saved to GDrive
