#+title: Notes - Game Programming with Python
#+author: Marcus Birkenkrahe
#+subtitle: COR 100/Year 1 - Lyon College - Fall 2024
#+startup: overview hideblocks indent entitiespretty:

* Week 1: And so it begins
#+attr_html: :width 600px:
[[../img/poster.png]]

- [X] Syllabus and Socrates
- [X] Python & Philosophy
- [ ] Coding & Colaboratory
- [X] Reading assignment

* Week 2: In Plato's Cave
#+attr_html: :width 400px:
[[../img/Socrates_Xanthippe.png]]

Socrates and Xanthippe
** Plato's Forms
#+attr_html: :width 600px:
[[../img/cave2.jpg]]

#+attr_html: :width 600px:
[[../img/cave.jpg]]

Plato's Analogy of the Cave

#+begin_notes
- Could the theory of (perfect) forms be useful somewhere?
- How does the allegory make you feel?
- What does the allegory make you think of?
#+end_notes

** Group exercise
#+attr_html: :width 600px:
[[../img/group.jpg]]

/Image: Rembrandt, Members of the Drapers' Guild, 1662./

1) Form groups of 5-6 people
   - One of you is Socrates ("the philosopher").
   - One of you is Meno ("the curious").
   - One of you is Anytus ("the man").
   - One of you is an observer of the conversation.
   - One of you is a recorder of the conversation.

2) Have a 5 minute "Socratic dialog" on the question "Can machines
   develop human intelligence?" (I'll time you.)

3) Record your results and report to the class (5 min max per group):
   every member of the group must give its view of the dialog.

4) The purpose is not to find a good answer to the question (that
   would be very difficult without additional research) but to test
   your "Socratic tools" after reading the text.

** End-of-Term Assignment: Self-Examination Essay
#+attr_html: :width 300px:
#+caption: Mark Gertler, Still-Life with Self-Portrait (1918)
[[../img/Mark-Gertler-Self-Portrait.jpg]]

- *At the end of the term*, you'll have to write a paper of about 3 (no
  less than 2) pages, casting yourself in the role of young Meno, and
  reflect on:

  1) What did you learn through the theme of this course ("Game
     Programming with Python")?
  2) When did you experience 'growing pains' in learning something new?
  3) How did you know that you learnt anything new?
  4) What learning will you still have to do about "Game Programming
     in Python"?
  5) How would you know that you still have something to learn?

- *Criteria:*
  1. Depth of self-examination
  2. Reference to direct evidence from Meno
  3. Concrete examples from the course
  4. Well-organized text (headings, body paragraphs)
  5. Well-edited and error-free.

- Here is an [[https://github.com/birkenkrahe/cor/blob/main/pdf/ai_paper.pdf][example paper]] written by AI as "Young Meno", who attended
  my "Game Programming with Python" course (approximately 3 pages).

* Week 3: Programming with Python in Colaboratory
#+attr_html: :width 600px:
[[../img/colab2.png]]

- [X] Programming as an art (with or without AI).
- [X] Programming with IPython, IDLE, and Google Colaboratory.
- [ ] Programming with Python: numbers, operations, variables.
- [ ] Simple programs: "Hello World" and user input/output.

* Week 4: Manipulating values
#+attr_html: :width 400px:
[[../img/random3.png]]

- [ ] Review Quiz 2
- [ ] Review Programming assignment 1
- [ ] Python Basics: Manipulating values
- [ ] Complete Quiz 3 & programming assignment 2 by next week

** Review quiz 2

1. IPython
2. IDLE
3. Google Colaboratory
4. Command-line
5. Python
6. .ipynb
7. Compiler
8. Assembler
9. GitHub
10. Debugger

** Review programming assignment 1

1) Loading libraries:
   #+begin_src python :results none :session *Python* :python python3 :exports both
     import matplotlib.pyplot as plt
     import random
   #+end_src

2) Getting random numbers:
   #+begin_src python :results none :session *Python* :python python3 :exports both
     random_numbers = [random.random() for _ in range(100)]
   #+end_src

3) Plotting with =plot= (line plot by default):
   #+begin_src python :file random.png :results file graphics output :session *Python* :python python3 :exports both
     plt.plot(random_numbers)
     plt.savefig("random.png")
   #+end_src

   #+RESULTS:
   [[file:random.png]]

4) To remove the lines use =plt.scatter=:
   #+begin_src python :file random2.png :results file graphics output :session *Python* :python python3 :exports both
     plt.scatter(range(len(random_numbers)), random_numbers)
     plt.savefig("random2.png")
   #+end_src

   #+RESULTS:
   [[file:random2.png]]

** Programming assignment 2 - Five Easy Pieces

1. Basic arithmetic
2. Variable manipulation
3. Working with expressions
4. Error handling
5. Bonus challenge (user input)

* Week 5: Writing programs - "Touching the void"
#+attr_html: :width 600px: 
[[../img/spacewalk.jpeg]]

/Image: Space X's Polaris Dawn astronauts on 1st ever private spacewalk./


- [ ] Quiz 2 review
- [ ] Review of last week's topics
- [ ] Review programming assignment bonus task
- [ ] Next: writing programs

** Quiz 2 review

Let's make a histogram in Python!

#+begin_src python :file gradesHist.png :results file graphics output :session *Python* :python python3 :exports both
  import matplotlib.pyplot as plt

  grades = [25.71,37.14,48.57,62.22,68.89,75.56,80.0,80.0,82.86,
            88.89,88.89,91.11,93.33,93.33,95.56,95.56,97.78,100.0]
  plt.clf()
  plt.hist(grades,
           edgecolor="white")
  plt.title("Histogram Quiz 2")
  plt.xlabel("Percentage [%]")
  plt.ylabel("Number of students")
  plt.savefig("gradesHist.png")
#+end_src

#+RESULTS:
[[file:gradesHist.png]]

** Review of last week's topics

1. Expressions
   #+begin_src python :results output :session *Python* :python python3 :exports both
     print(2 + 2)
   #+end_src

   #+RESULTS:
   : 4

2. Statements

   #+begin_src python :results output :session *Python* :python python3 :exports both
     x = 5
     print(x)
   #+end_src

   #+RESULTS:
   : 5

3. Variables
   #+begin_src python :results output :session *Python* :python python3 :exports both
     x = 5
     y = 10
     z = x + y
     print(x+y)
     print(z)
   #+end_src

   #+RESULTS:
   : 15
   : 15
   
4. Assignment
   #+begin_src python :results output :session *Python* :python python3 :exports both
     greeting = "Hello"
     print(greeting)
   #+end_src

   #+RESULTS:
   : Hello

5. =print= function

   #+begin_src python :results output :session *Python* :python python3 :exports both
     title = "Professor"
     print(f"{greeting}, {title}!")
   #+end_src

   #+RESULTS:
   : Hello, Professor!

6. SyntaxError
   #+begin_quote
   If you violate the language rules, e.g. =5 += (missing RHS value)
   #+end_quote

7. TypeError
   #+begin_quote
   If you mix data types: e.g. =print("Hello," + 2)= (cannot add string to
   number).
   #+end_quote

8. NameError
   #+begin_quote
   If you use an undefined variable.
   #+end_quote

9. ValueError
   #+begin_quote
   If a function receives the wrong value, e.g. =int("marcus")=
   #+end_quote

10. Scientific notation
    #+begin_src python :results output :session *Python* :python python3 :exports both
      print(1.e9)
      print(1_000_000_000.0)
    #+end_src

    #+RESULTS:
    : 1000000000.0
    : 1000000000.0

11. Floating-point
    #+begin_src python :results output :session *Python* :python python3 :exports both
      foo = 100
      bar = float(foo)
      print(f"foo = {foo}, bar = {bar}")
    #+end_src

    #+RESULTS:
    : foo = 100, bar = 100.0

12. PEMDAS
    #+begin_quote
    Parentheses > Exponentiation > Multiplication/Division > Addition/Subtraction
    #+end_quote

    #+begin_src python :results output :session *Python* :python python3 :exports both
      print( 4 + (3 * 4) - 2**(2+2))
    #+end_src

    #+RESULTS:
    : 0

13. Neuroplasticity ("brain groove")
    #+attr_html: :width 500px:
    [[../img/neuroplasticity.png]]

14. What's the difference between =file.py= and =file.ipynb=?
    #+begin_quote
    - =file.py= is a Python script that can be run with =python3= on the
      command-line.
    - =file.ipynb= is an IPython notebook that can be run in Colab.
    #+end_quote

** Review programming assignment: Bonus task

The [[https://github.com/birkenkrahe/cor/blob/main/org/assignments/2_manipulating_values.org][sample solution notebook]] is available as an Org-mode file on
GitHub (do you know where to look?) - originally in Emacs + Org-mode.

You can also save your notebooks as "gist" on GitHub, as code snippets
that will open in Colab and can be made private, [[https://gist.github.com/birkenkrahe/a4e31ba928d4d08b06c172f6ce60ad99][like this]].

#+attr_html: :width 600px:
[[../img/gist.png]]

** Participation and assignments

- We will code in Google Colaboratory together

- You can get the complete lecture on GitHub

- I will publish a short quiz for you to complete

- I will publish a programming assignment for you

- The assignment solution will be posted next week

- We will review all the material next week

- You should stop by my office for questions

- You can also send me a Google Chat message

- You can also participate in the Google chat space 



* Week 6: String values, hello world, input/output
#+attr_html: :width 500px:
[[../img/the-elephants-large.jpg]]

/Image: Salvador Dali, The Elephants (1948)/

- [X] Review: Temperature Converter ([[https://gist.github.com/birkenkrahe/4aecc772437994328fec72d1b6d1ebcb][GitHub gist]])
- [X] Next quiz and assignment introduced via video

Topics:  
- [X] String values
- [X] Hello world program
- [X] Getting input & printing output
- [ ] Forgetting and naming variables

The gist for this week's lecture is [[https://gist.github.com/birkenkrahe/724c4bb4559672069f738a99cae1cda6][here]] in GitHub.

Next week: Starting the game program!

If we have time, we'll move into Python graphics, too.

* Week 7: Writing a game
#+attr_html: :width 400px:
#+Caption: AI podcasters by Grok
[[../img/podcasters.jpeg]]

- [X] New! 10-min "Deep Dive" introductory podcast ([[https://chat.google.com/room/AAAA5kYGrM8/6vlfTuECFhQ/6vlfTuECFhQ?cls=10][chat]])

- [X] Results quiz 5: Nice going!
  #+attr_html: :width 600px:
  [[../img/quiz5.png]]

- [ ] Review assignment: Working with strings in Python

** Writing a game

- Defining the game
- Planning the game
- Generating random numbers
- Repeating code
- Checking conditions
- Printing the result
- Putting it all together
- Program extensions

Open the Colab notebook and save it to your GDrive:
[[https://tinyurl.com/guessing-game-ipynb][tinyurl.com/guessing-game-ipynb]]

