#+title: Notes - Game Programming with Python
#+author: Marcus Birkenkrahe
#+subtitle: COR 100/Year 1 - Lyon College - Fall 2024
#+startup: overview hideblocks indent entitiespretty:
* DONE Week 1: And so it begins
#+attr_html: :width 600px:
[[../img/poster.png]]

- [X] Syllabus and Socrates
- [X] Python & Philosophy
- [ ] Coding & Colaboratory
- [X] Reading assignment

* DONE Week 2: In Plato's Cave
#+attr_html: :width 400px:
[[../img/Socrates_Xanthippe.png]]

Socrates and Xanthippe
** Plato's Forms
#+attr_html: :width 600px:
[[../img/cave2.jpg]]

#+attr_html: :width 600px:
[[../img/cave.jpg]]

Plato's Analogy of the Cave

#+begin_notes
- Could the theory of (perfect) forms be useful somewhere?
- How does the allegory make you feel?
- What does the allegory make you think of?
#+end_notes

** Group exercise
#+attr_html: :width 600px:
[[../img/group.jpg]]

/Image: Rembrandt, Members of the Drapers' Guild, 1662./

1) Form groups of 5-6 people
   - One of you is Socrates ("the philosopher").
   - One of you is Meno ("the curious").
   - One of you is Anytus ("the man").
   - One of you is an observer of the conversation.
   - One of you is a recorder of the conversation.

2) Have a 5 minute "Socratic dialog" on the question "Can machines
   develop human intelligence?" (I'll time you.)

3) Record your results and report to the class (5 min max per group):
   every member of the group must give its view of the dialog.

4) The purpose is not to find a good answer to the question (that
   would be very difficult without additional research) but to test
   your "Socratic tools" after reading the text.

** End-of-Term Assignment: Self-Examination Essay
#+attr_html: :width 300px:
#+caption: Mark Gertler, Still-Life with Self-Portrait (1918)
[[../img/Mark-Gertler-Self-Portrait.jpg]]

- *At the end of the term*, you'll have to write a paper of about 3 (no
  less than 2) pages, casting yourself in the role of young Meno, and
  reflect on:

  1) What did you learn through the theme of this course ("Game
     Programming with Python")?
  2) When did you experience 'growing pains' in learning something new?
  3) How did you know that you learnt anything new?
  4) What learning will you still have to do about "Game Programming
     in Python"?
  5) How would you know that you still have something to learn?

- *Criteria:*
  1. Depth of self-examination
  2. Reference to direct evidence from Meno
  3. Concrete examples from the course
  4. Well-organized text (headings, body paragraphs)
  5. Well-edited and error-free.

- Here is an [[https://github.com/birkenkrahe/cor/blob/main/pdf/ai_paper.pdf][example paper]] written by AI as "Young Meno", who attended
  my "Game Programming with Python" course (approximately 3 pages).

* DONE Week 3: Programming with Python in Colaboratory
#+attr_html: :width 600px:
[[../img/colab2.png]]

- [X] Programming as an art (with or without AI).
- [X] Programming with IPython, IDLE, and Google Colaboratory.
- [ ] Programming with Python: numbers, operations, variables.
- [ ] Simple programs: "Hello World" and user input/output.

* DONE Week 4: Manipulating values
#+attr_html: :width 400px:
[[../img/random3.png]]

- [ ] Review Quiz 2
- [ ] Review Programming assignment 1
- [ ] Python Basics: Manipulating values
- [ ] Complete Quiz 3 & programming assignment 2 by next week

** Review quiz 2

1. IPython
2. IDLE
3. Google Colaboratory
4. Command-line
5. Python
6. .ipynb
7. Compiler
8. Assembler
9. GitHub
10. Debugger

** Review programming assignment 1

1) Loading libraries:
   #+begin_src python :results none :session *Python* :python python3 :exports both
     import matplotlib.pyplot as plt
     import random
   #+end_src

2) Getting random numbers:
   #+begin_src python :results none :session *Python* :python python3 :exports both
     random_numbers = [random.random() for _ in range(100)]
   #+end_src

3) Plotting with =plot= (line plot by default):
   #+begin_src python :file random.png :results file graphics output :session *Python* :python python3 :exports both
     plt.plot(random_numbers)
     plt.savefig("random.png")
   #+end_src

   #+RESULTS:
   [[file:random.png]]

4) To remove the lines use =plt.scatter=:
   #+begin_src python :file random2.png :results file graphics output :session *Python* :python python3 :exports both
     plt.scatter(range(len(random_numbers)), random_numbers)
     plt.savefig("random2.png")
   #+end_src

   #+RESULTS:
   [[file:random2.png]]

** Programming assignment 2 - Five Easy Pieces

1. Basic arithmetic
2. Variable manipulation
3. Working with expressions
4. Error handling
5. Bonus challenge (user input)

* DONE Week 5: Writing programs - "Touching the void"
#+attr_html: :width 600px:
[[../img/spacewalk.jpeg]]

/Image: Space X's Polaris Dawn astronauts on 1st ever private spacewalk./


- [ ] Quiz 2 review
- [ ] Review of last week's topics
- [ ] Review programming assignment bonus task
- [ ] Next: writing programs

** Quiz 2 review

Let's make a histogram in Python!

#+begin_src python :file gradesHist.png :results file graphics output :session *Python* :python python3 :exports both
  import matplotlib.pyplot as plt

  grades = [25.71,37.14,48.57,62.22,68.89,75.56,80.0,80.0,82.86,
            88.89,88.89,91.11,93.33,93.33,95.56,95.56,97.78,100.0]
  plt.clf()
  plt.hist(grades,
           edgecolor="white")
  plt.title("Histogram Quiz 2")
  plt.xlabel("Percentage [%]")
  plt.ylabel("Number of students")
  plt.savefig("gradesHist.png")
#+end_src

#+RESULTS:
[[file:gradesHist.png]]

** Review of last week's topics

1. Expressions
   #+begin_src python :results output :session *Python* :python python3 :exports both
     print(2 + 2)
   #+end_src

   #+RESULTS:
   : 4

2. Statements

   #+begin_src python :results output :session *Python* :python python3 :exports both
     x = 5
     print(x)
   #+end_src

   #+RESULTS:
   : 5

3. Variables
   #+begin_src python :results output :session *Python* :python python3 :exports both
     x = 5
     y = 10
     z = x + y
     print(x+y)
     print(z)
   #+end_src

   #+RESULTS:
   : 15
   : 15

4. Assignment
   #+begin_src python :results output :session *Python* :python python3 :exports both
     greeting = "Hello"
     print(greeting)
   #+end_src

   #+RESULTS:
   : Hello

5. =print= function

   #+begin_src python :results output :session *Python* :python python3 :exports both
     title = "Professor"
     print(f"{greeting}, {title}!")
   #+end_src

   #+RESULTS:
   : Hello, Professor!

6. SyntaxError
   #+begin_quote
   If you violate the language rules, e.g. =5 += (missing RHS value)
   #+end_quote

7. TypeError
   #+begin_quote
   If you mix data types: e.g. =print("Hello," + 2)= (cannot add string to
   number).
   #+end_quote

8. NameError
   #+begin_quote
   If you use an undefined variable.
   #+end_quote

9. ValueError
   #+begin_quote
   If a function receives the wrong value, e.g. =int("marcus")=
   #+end_quote

10. Scientific notation
    #+begin_src python :results output :session *Python* :python python3 :exports both
      print(1.e9)
      print(1_000_000_000.0)
    #+end_src

    #+RESULTS:
    : 1000000000.0
    : 1000000000.0

11. Floating-point
    #+begin_src python :results output :session *Python* :python python3 :exports both
      foo = 100
      bar = float(foo)
      print(f"foo = {foo}, bar = {bar}")
    #+end_src

    #+RESULTS:
    : foo = 100, bar = 100.0

12. PEMDAS
    #+begin_quote
    Parentheses > Exponentiation > Multiplication/Division > Addition/Subtraction
    #+end_quote

    #+begin_src python :results output :session *Python* :python python3 :exports both
      print( 4 + (3 * 4) - 2**(2+2))
    #+end_src

    #+RESULTS:
    : 0

13. Neuroplasticity ("brain groove")
    #+attr_html: :width 500px:
    [[../img/neuroplasticity.png]]

14. What's the difference between =file.py= and =file.ipynb=?
    #+begin_quote
    - =file.py= is a Python script that can be run with =python3= on the
      command-line.
    - =file.ipynb= is an IPython notebook that can be run in Colab.
    #+end_quote

** Review programming assignment: Bonus task

The [[https://github.com/birkenkrahe/cor/blob/main/org/assignments/2_manipulating_values.org][sample solution notebook]] is available as an Org-mode file on
GitHub (do you know where to look?) - originally in Emacs + Org-mode.

You can also save your notebooks as "gist" on GitHub, as code snippets
that will open in Colab and can be made private, [[https://gist.github.com/birkenkrahe/a4e31ba928d4d08b06c172f6ce60ad99][like this]].

#+attr_html: :width 600px:
[[../img/gist.png]]

** Participation and assignments

- We will code in Google Colaboratory together

- You can get the complete lecture on GitHub

- I will publish a short quiz for you to complete

- I will publish a programming assignment for you

- The assignment solution will be posted next week

- We will review all the material next week

- You should stop by my office for questions

- You can also send me a Google Chat message

- You can also participate in the Google chat space

* DONE Week 6: String values, hello world, input/output
#+attr_html: :width 500px:
[[../img/the-elephants-large.jpg]]

/Image: Salvador Dali, The Elephants (1948)/

- [X] Review: Temperature Converter ([[https://gist.github.com/birkenkrahe/4aecc772437994328fec72d1b6d1ebcb][GitHub gist]])
- [X] Next quiz and assignment introduced via video

Topics:
- [X] String values
- [X] Hello world program
- [X] Getting input & printing output
- [ ] Forgetting and naming variables

  The gist for this week's lecture is [[https://gist.github.com/birkenkrahe/724c4bb4559672069f738a99cae1cda6][here]] in GitHub.

  Next week: Starting the game program!

  If we have time, we'll move into Python graphics, too.

* DONE Week 7: Writing a game: defining & planning [Oct 1]
#+attr_html: :width 400px:
#+Caption: AI podcasters by Grok
[[../img/podcasters.jpeg]]

- [X] New! 10-min "Deep Dive" introductory podcast ([[https://chat.google.com/room/AAAA5kYGrM8/6vlfTuECFhQ/6vlfTuECFhQ?cls=10][chat]])

- [X] Results quiz 5: Nice going!
  #+attr_html: :width 600px:
  [[../img/quiz5.png]]

- [ ] Review assignment: Working with strings in Python

** Writing a game

- [X] Defining the game
- [X] Planning the game
- [ ] Generating random numbers
- [ ] Repeating code
- [ ] Checking conditions
- [ ] Printing the result
- [ ] Putting it all together
- [ ] Program extensions

Open the Colab notebook and save it to your GDrive:
[[https://tinyurl.com/guessing-game-ipynb][tinyurl.com/guessing-game-ipynb]]

* DONE Week 8: Pseudorandom numbers and repeating loops [Oct 8]
#+attr_html: :width 600px:
[[../img/assassins_creed_odyssey.png]]

/Image: I'm still playing Assassin's Creed Odyssey (again)/

*There will be a new quiz and a new programming assignment this week.*

** Interesting! Learn programming by coding games

via @denicmarko (10/2/24)
- Blockchain → cryptozombies.​io
- SQL → mystery.knightlab.​com
- JavaScript → warriorjs.​com
- Go → codingame.​com
- Python → codedex.​io
- CSS → cssbattle.​dev
- Java → tynker.​com
- Git → ohmygit.​org

** Review: what do you remember from last week?

- We defined and planned a simple text-based game
- It involved requirements (output)
- We started writing down the solution code
- Next, we're going to analyze and understand it
- Then, we're going to refine the game

* DONE Week 9: Checking conditions and converting data types [Oct 15]
#+attr_html: :width 400px:
#+caption: Andrei Rublev, Three angels visiting Abraham/Trinity (1411)
[[../img/trinity.jpg]]

/Image: see also A Tarkovsky's film "Andrei Rublev" (1966)/

- [X] Checking conditions with =if=, =elif=, and =else=.

- [X] Converting data types from character to numeric.

** Review: Pseudorandom numbers and repeating loops

1. How do you generate a random number between 1 and 20 using Python?
   #+begin_src python :results output :session *Python* :python python3 :exports both
     import random
     x = random.randint(1, 1000)
     print(x)
   #+end_src

   #+RESULTS:
   : 468

2. How can you print 10 random numbers using a loop?
   #+begin_src python :results output :session *Python* :python python3 :exports both
     i = 0 # start state
     while (i<10): # stop condition
         print(random.randint(1,20))
         i=i+1 # increment
   #+end_src

   #+RESULTS:
   #+begin_example
   9
   7
   7
   14
   17
   8
   3
   10
   3
   20
   #+end_example

3. What's the average of these pseudorandom numbers? How would you
   compute that?
   #+begin_src python :results output :session *Python* :python python3 :exports both
     i = 0
     sum = 0
     n = 10 # upper bound for the random generator
     while (i<n):
         x = random.randint(1,n)
         i=i+1
         sum=sum+x
         print(f"Average = {((sum/n)/n)*100:.2f}% (n = {n}).")
   #+end_src

   #+RESULTS:
   #+begin_example
   Average = 3.00% (n = 10).
   Average = 10.00% (n = 10).
   Average = 14.00% (n = 10).
   Average = 22.00% (n = 10).
   Average = 32.00% (n = 10).
   Average = 38.00% (n = 10).
   Average = 41.00% (n = 10).
   Average = 43.00% (n = 10).
   Average = 52.00% (n = 10).
   Average = 56.00% (n = 10).
   #+end_example

4. What is the purpose of the `while True:` loop in Python?
   #+begin_quote
   The `while True:` loop creates an infinite loop, meaning the loop will
   continue to run until a `break` condition is encountered or another
   way of stopping the loop is provided.
   #+end_quote

5. What does the following code do?
   #+begin_src python :python python3 :session *Python* :results output
     i = 5  # START
     while i > 0:  # STOP
         i = i - 1  # INCREMENT/DECREMENT
         print(i)
   #+end_src

   #+RESULTS:
   : 4
   : 3
   : 2
   : 1
   : 0

   #+begin_quote
   The code starts with `i = 5` and enters a loop. It reduces `i` by 1 in
   each iteration and prints the value of `i`. The loop continues until
   `i` is no longer greater than 0, printing 4, 3, 2, 1, and 0 in
   sequence.
   #+end_quote

* DONE Week 10: H.A.T.S. poster [Oct 22]
#+attr_html: :width 600px:
[[../img/van_gogh_potato_eaters_1885.jpg]]

/Image: Vincent van Gogh, The Potato Eaters, 1885/

- [X] Remember: *Spragin's Lunch in Spragin's house today 12-1 pm*

- [X] Remember: *Service Day tomorrow - sign up for a project!*

- [ ] Finishing today: "Guessing a number" game

- [ ] Next up: *Text adventure game in Python*

- [X] Also: *H.A.T.S. poster & symposium (participation grade)*

- [X] Deadline to get a PowerPoint poster printed: Nov 7

* DONE Week 11: H.A.T.S. poster update & Text adventure I [Oct 29]
#+attr_html: :width 800px: 
[[../img/HATS_2023_POSTER_FINAL.png]]

- [X] Update from each group!

  | IDEAS   | DESIGN       | BACKGROUND | ACTIVITIES    | CONCLUSIONS | EVIDENCE |
  |---------+--------------+------------+---------------+-------------+----------|
  | Chris   | Deuce (Earl) | Eric       | Yovani        | Aidan       | Mark     |
  | Brandon | Tiago        | Surya      | Kadyn         | Suyog       | Jerome   |
  | Nikolas | Kritika      | Shova      | Lane (Justin) | Rupesh      | Kapil    |
  |         |              | Kripa      |               |             |          |

** WAITING Review of last week of "writing a guessing game"

You can code along if you like.

1. Can you write a 2-line program that enters an infinite loop and
   breaks on the condition that the user enters 'q'?
   #+begin_src python :session *Python* :results output
     while True:
         if input("Enter q to quit: ") == 'q': break
   #+end_src

2. Can you write a 2-line program that counts down from i=100 to 95?
   #+begin_src python :session *Python* :results output
     i = 100;
     while i > 95: i=i-1
   #+end_src

3. Write a 1-line program that asks the user for his name and prints
   out a greeting "Hello, [name]".
   #+begin_src python :results output :session *Python* :python python3
     print(f'Hello, {input("Enter your name: ")}.')
   #+end_src

4. Write a 2-line program that tests if the user input is between 1
   and 10. If it is, print "Yay!, otherwise print "Nay."
   #+begin_src python :results output :session *Python* :python python3
     if (1 < int(input("Enter integer in (1,10): ")) < 10): print("Yay!")
     else: print("Nay.")
   #+end_src

5. Write a game dialog where the user is asked if he wants to go
   'left' or 'right', which leads to a 'cave' or a 'forest'.
   #+begin_src python :results output :session *Python* :python python3 
     choice = input("Type 'left' or 'right': ")
     if(choice=='left'): print("You're in a cave")
     elif(choice=='right'): print("You're in a forest")
     else: print("You're going nowhere")
   #+end_src

** WAITING Text adventure 

Open the Google Colab notebook and code along with me:
[[https://tinyurl.com/text-adventure-1][tinyurl.com/text-adventure-1]]

* DONE Week 12: +Text adventure game II+ Work in Groups & Meno essay [Nov 5]

* Meno/Plato essay

[[https://docs.google.com/document/d/1GlmUL5Pmzs6HPAj_ZaMsk0Md3JET-dE_/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][Here are the instructions for the Plato/Meno essay]] that I explained
to you in class today here in GDrive. The deadline for this is
December 3. If you turn in the essay late, you get 50% of the points
only.  As promised, I will upload my answer to the essay challenge -
some time over the next couple of weeks.

* Week 13: +Expanding the text adventure game+ Working on the Tri-fold [Nov 12]


* Week 14: H.A.T.S. preparation: Presentation/Schedule [Nov 19]

- H.A.T.S. is on Wednesday, Nov 20, in Derby


* Deadline for the essay is Dec 3
